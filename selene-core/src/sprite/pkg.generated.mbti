// Generated using `moon info`, DON'T EDIT IT
package "Milky2018/selene/sprite"

import(
  "Milky2018/selene/math"
  "Milky2018/selene/system"
)

// Values
fn frames_from_atlas(String, Int, width~ : Double, height~ : Double, offset? : @math.Vec2D, space_x? : Double) -> Array[AnimationFrame]

fn[T] get_or(T?, T) -> T

fn is_animation_finished(@system.Entity) -> Bool

fn play_animation(@system.Entity, Animation, from_start? : Bool, loop_? : Bool, rate? : Double, transform? : @math.Transform, layer? : RenderLayer) -> Unit

fn render_sprite_system(&@system.Backend) -> Unit

fn render_ui_system(&@system.Backend) -> Unit

fn render_world_system(&@system.Backend) -> Unit

let sprites : Map[@system.Entity, Sprite]

// Errors

// Types and methods
pub struct Animation {
  frames : Array[AnimationFrame]
  transform : @math.Transform
  loop_ : Bool
  rate : Double
  id : Int
}
fn Animation::new(Array[AnimationFrame], loop_? : Bool, rate? : Double, transform? : @math.Transform) -> Self
fn Animation::single_frame(String, @math.Vec2D, transform? : @math.Transform, offset? : @math.Vec2D) -> Self

pub(all) struct AnimationFrame {
  sprite_path : String
  size : @math.Vec2D
  offset : @math.Vec2D
}

pub(all) struct ColorRect {
  size : @math.Vec2D
  color : String
}
fn ColorRect::new(@math.Vec2D, String) -> Self

pub struct ColoredShape {
  shape : Shape
  style : DrawStyle
}
fn ColoredShape::new(Shape, DrawStyle) -> Self

pub enum DrawStyle {
  Fill(String)
  Stroke(String, Double)
}
fn DrawStyle::fill(String) -> Self
fn DrawStyle::stroke(String, Double) -> Self

pub(all) struct Picture {
  size : @math.Vec2D
  tile_path : String
  transform : @math.Transform
  repeat : @system.RepeatMode
}
fn Picture::new(@math.Vec2D, String, transform? : @math.Transform, repeat? : @system.RepeatMode) -> Self

pub enum RenderLayer {
  GameWorld
  UI
}
fn RenderLayer::game_world() -> Self
fn RenderLayer::ui() -> Self
impl Eq for RenderLayer
impl Show for RenderLayer

pub enum Shape {
  Rect(Double, Double, Double)
  Circle(Double)
  Ellipse(Double, Double, Double)
  Triangle(Double, Double)
}
fn Shape::circle(Double) -> Self
fn Shape::ellipse(Double, Double, Double) -> Self
fn Shape::rect(Double, Double, Double) -> Self
fn Shape::triangle(Double, Double) -> Self

pub(all) struct Sprite {
  sprite_type : SpriteType
  zindex : Int
  mut visible : Bool
  offset : @math.Vec2D
  layer : RenderLayer
}
fn Sprite::from_animation(Animation, Int, offset? : @math.Vec2D, layer? : RenderLayer) -> Self
fn Sprite::from_color_rect(ColorRect, Int, offset? : @math.Vec2D, layer? : RenderLayer) -> Self
fn Sprite::from_picture(Picture, Int, offset? : @math.Vec2D, layer? : RenderLayer) -> Self
fn Sprite::from_shape(ColoredShape, Int, offset? : @math.Vec2D, layer? : RenderLayer) -> Self
fn Sprite::from_text(Text, Int, offset? : @math.Vec2D, layer? : RenderLayer) -> Self

pub enum SpriteType {
  Picture(Picture)
  Animation(Animation, mut frame~ : Double)
  Text(Text)
  ColorRect(ColorRect)
  ColoredShape(ColoredShape)
}

pub(all) struct Text {
  mut content : String
  mut color : String
  mut font : String
}
fn Text::new(String, color? : String, font? : String) -> Self

// Type aliases

// Traits

