// Generated using `moon info`, DON'T EDIT IT
package "Milky2018/selene/sprite"

import(
  "Milky2018/selene/math"
  "Milky2018/selene/system"
)

// Values
fn frames_from_altas(String, Int, width~ : Double, height~ : Double, offset? : @math.Vec2D) -> Array[AnimationFrame]

fn play_animation(@system.Entity, Animation, from_start? : Bool, loop_? : Bool, rate? : Double, transform? : @math.Transform) -> Unit

fn render_sprite_system(&@system.Backend) -> Unit

let sprites : Map[@system.Entity, Sprite]

// Errors

// Types and methods
pub(all) struct Animation {
  frames : Array[AnimationFrame]
  mut transform : @math.Transform
  mut loop_ : Bool
  mut rate : Double
  mut frame : Double
}
fn Animation::new(Array[AnimationFrame], loop_? : Bool, rate? : Double, transform? : @math.Transform, start_frame? : UInt) -> Self
fn Animation::single_frame(String, @math.Vec2D, transform? : @math.Transform, offset? : @math.Vec2D) -> Self

pub(all) struct AnimationFrame {
  sprite_path : String
  size : @math.Vec2D
  offset : @math.Vec2D
}

pub(all) struct Picture {
  size : @math.Vec2D
  tile_path : String
  transform : @math.Transform
  repeat : @system.RepeatMode
}
fn Picture::new(@math.Vec2D, String, transform? : @math.Transform, repeat? : @system.RepeatMode) -> Self

pub(all) struct Sprite {
  sprite_type : SpriteType
  zindex : Int
}
fn Sprite::new_animation(Animation, Int) -> Self
fn Sprite::new_picture(Picture, Int) -> Self
fn Sprite::new_text(Text, Int) -> Self

pub enum SpriteType {
  Picture(Picture)
  Animation(Animation)
  Text(Text)
}

pub(all) struct Text {
  mut content : String
  mut color : String
  mut font : String
}
fn Text::new(String, color? : String, font? : String) -> Self

// Type aliases

// Traits

